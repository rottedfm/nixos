#!/bin/bash

# exit if any command exits with a non-zero status
set -e

WALLPAPER_PATH="$HOME/.dotfiles/wallpapers"
STYLIX_NIX="$HOME/.dotfiles/homeManager/modules/stylix.nix"

echo "Adding chanages to Git..."
git add ~/.dotfiles

# function to update stylix.nix with new wallpaper
update_wallpaper() {
  local wallpaper_file=$1
  echo "Updating wallpaper to $wallpaper_file..."

  # use sed to replace the line containing stylix.image
  sed -i "s|stylix.image = .*;|stylix.image = ../../wallpapers/$wallpaper_file;|" "$STYLIX_NIX"

  echo "Wallpaper updated successfully in $STYLIX_NIX."
}

# function to handle the wallpaper flag
handle_wallpaper_flag() {
  local wallpaper_choice=$1

  if [[ "$wallpaper_choice" == "random" ]]; then
    # Select a random .jpg or .png file from the wallpapers folder
    wallpaper_file=$(ls "$WALLPAPER_PATH"/*.{jpg,png} 2> /dev/null | shuf -n 1)
    wallpaper_file=$(basename "$wallpaper_file")  # Get only the file name
  else
    # Use the specified file, ensuring it's a .jpg or .png
    if [[ "$wallpaper_choice" =~ \.(jpg|png)$ ]]; then
      wallpaper_file="$wallpaper_choice"
    else
      echo "Error: Invalid wallpaper file. Only .jpg or .png files are supported."
      exit 1
    fi
  fi

  # Check if the file exists in the wallpapers folder
  if [[ ! -f "$WALLPAPER_PATH/$wallpaper_file" ]]; then
    echo "Error: Wallpaper file '$wallpaper_file' not found in $WALLPAPER_PATH."
    exit 1
  fi

  # Update stylix.nix with the new wallpaper
  update_wallpaper "$wallpaper_file"

  echo "Closing Hyprland..."
  echo "Starting sync..."
  pkill Hyprland | sync
}

# function to rebuild NixOS
rebuild_nixos() {
  echo "Rebuilding NixOS configuration..."
  sudo nixos-rebuild switch --flake /home/rotted/.dotfiles#fm
}

# function to rebuild home-manager
rebuild_home_manager() {
  echo "Rebuilding Home-Manager configuration..."
  home-manager switch --flake /home/rotted/.dotfiles#rotted@fm
}

# function to hadle rebuild failure
handle_failure() {
  local service=$1
  echo "$service rebuild failed!"
  read -p "Do you want to show-trace? (y/n): " answer
  answer=${answer,,}
  if [[ "$answer" == "y" ]]; then
    if [[ "$service" == "NixOS" ]]; then
      sudo nixos-rebuild switch --show-trace --flake /home/rotted/.dotfiles#fm
    else 
      home-manager switch --show-trace --flake /home/rotted/.dotfiles#rotted@fm
    fi
  fi
  exit 1
}

# function to update stylix.nix with the new polarity
update_polarity() {
  local polarity_choice=$1

  if [[ "$polarity_choice" != "dark" && "$polarity_choice" != "light" ]]; then
    echo "Error: Invalid polarity option. Please use 'dark' or 'light'."
    exit 1
  fi

  echo "Updating polarity to $polarity_choice..."
   
  sed -i "s|stylix.polarity = \".*\";|stylix.polarity = \"$polarity_choice\";|" "$STYLIX_NIX"
  
  echo "Polarity updated successfully in $STYLIX_NIX."
}
# Add your flag options here
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --wallpaper|-w)
      handle_wallpaper_flag "$2"
      shift  # Move past the wallpaper argument
      ;;
    --polarity|-p)
      update_polarity "$2"
      shift  # Move past the polarity argument
      ;;
    *) 
      echo "Unknown parameter passed: $1"
      exit 1
      ;;
  esac
  shift
done

# attempt to rebuild nixos
if ! rebuild_nixos; then
  handle_failure "NixOS"
fi

# attempt to rebuild home-manager
if ! rebuild_home_manager; then 
  handle_failure "Home-Manager"
fi

cd /home/rotted/.dotfiles || exit 1


# show git diff
echo "Showing git diff..."
git diff --cached

# commit chanages 
COMMIT_MSG="$(date)"
git commit -m "$COMMIT_MSG"

# push changes to git
git push -u origin main

# check if the push was successful
if [ $? -eq 0 ]; then
  echo "Changes successfully pushed to Git."
else
  echo "Failed to push changes to Git."
fi
